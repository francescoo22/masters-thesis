@article{GenevaConvention,
author = {Hogg, John and Lea, Doug and Wills, Alan and deChampeaux, Dennis and Holt, Richard},
title = {The Geneva convention on the treatment of object aliasing},
year = {1992},
issue_date = {April 1992},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {3},
number = {2},
issn = {1055-6400},
url = {https://doi.org/10.1145/130943.130947},
doi = {10.1145/130943.130947},
abstract = {Aliasing has been a problem in both formal verification and practical programming for a number of years. To the formalist, it can be annoyingly difficult to prove the simple Hoare formula {x = true} y := false {x = true}. If x and y refer to the same boolean variable, i.e., x and y are aliased, then the formula will not be valid, and proving that aliasing cannot occur is not always straightforward. To the practicing programmer, aliases can result in mysterious bugs as variables change their values seemingly on their own. A classic example is the matrix multiply routine mult(left, right, result) which puts the product of its first two parameters into the third. This works perfectly well until the day some unsuspecting programmer writes the very reasonable statement mult(a, b, a). If the implementor of the routine did not consider the possibility that an argument may be aliased with the result, disaster is inevitable.},
journal = {SIGPLAN OOPS Mess.},
month = {apr},
pages = {11–16},
numpages = {6}
}

@article{zimmerman2023latte,
  title={Latte: Lightweight Aliasing Tracking for Java},
  author={Zimmerman, Conrad and Gamboa, Catarina and Fonseca, Alcides and Aldrich, Jonathan},
  journal={arXiv preprint arXiv:2309.05637},
  year={2023}
}

@article{boyland2001alias,
  title={Alias burying: Unique variables without destructive reads},
  author={Boyland, John},
  journal={Software: Practice and Experience},
  volume={31},
  number={6},
  pages={533--553},
  year={2001},
  publisher={Wiley Online Library}
}

@InProceedings{An-Entente-Cordiale,
author="Marshall, Daniel
and Vollmer, Michael
and Orchard, Dominic",
editor="Sergey, Ilya",
title="Linearity and Uniqueness: An Entente Cordiale",
booktitle="Programming Languages and Systems",
year="2022",
publisher="Springer International Publishing",
address="Cham",
pages="346--375",
abstract="Substructural type systems are growing in popularity because they allow for a resourceful interpretation of data which can be used to rule out various software bugs. Indeed, substructurality is finally taking hold in modern programming; Haskell now has linear types roughly based on Girard's linear logic but integrated via graded function arrows, Clean has uniqueness types designed to ensure that values have at most a single reference to them, and Rust has an intricate ownership system for guaranteeing memory safety. But despite this broad range of resourceful type systems, there is comparatively little understanding of their relative strengths and weaknesses or whether their underlying frameworks can be unified. There is often confusion about whether linearity and uniqueness are essentially the same, or are instead `dual' to one another, or somewhere in between. This paper formalises the relationship between these two well-studied but rarely contrasted ideas, building on two distinct bodies of literature, showing that it is possible and advantageous to have both linear and unique types in the same type system. We study the guarantees of the resulting system and provide a practical implementation in the graded modal setting of the Granule language, adding a third kind of modality alongside coeffect and effect modalities. We then demonstrate via a benchmark that our implementation benefits from expected efficiency gains enabled by adding uniqueness to a language that already has a linear basis.",
isbn="978-3-030-99336-8"
}

@article{aldrich2002alias,
  title={Alias annotations for program understanding},
  author={Aldrich, Jonathan and Kostadinov, Valentin and Chambers, Craig},
  journal={ACM SIGPLAN Notices},
  volume={37},
  number={11},
  pages={311--330},
  year={2002},
  publisher={ACM New York, NY, USA}
}



@online{Kotlin,
  author       = {JetBrains},
  title        = {Kotlin Programming Language},
  year         = {2024},
  url          = {https://kotlinlang.org/},
}

@book{Aliasing-OOP,
editor = {Clarke, Dave and Noble, James and Wrigstad, Tobias},
title = {Aliasing in Object-Oriented Programming: types, analysis, and verification},
year = {2013},
isbn = {9783642369452},
publisher = {Springer-Verlag},
address = {Berlin, Heidelberg}
}